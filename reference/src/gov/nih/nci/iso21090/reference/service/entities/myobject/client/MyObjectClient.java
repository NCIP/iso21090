package gov.nih.nci.iso21090.reference.service.entities.myobject.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.iso21090.extensions.Id;
import gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.MyObjectPortType;
import gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.service.MyObjectServiceAddressingLocator;
import gov.nih.nci.iso21090.reference.service.entities.myobject.common.MyObjectI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class MyObjectClient extends MyObjectClientBase implements MyObjectI {	

    public MyObjectClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);	
    }

    public MyObjectClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url,proxy);
    }

    public MyObjectClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr,null);
    }

    public MyObjectClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr,proxy);
    }

    public static void usage(){
        System.out.println(MyObjectClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{
            if(!(args.length < 2)){
                if(args[0].equals("-url")){
                    MyObjectClient client = new MyObjectClient(args[1]);
                    // place client calls here if you want to use this main as a
                    // test....
                    System.out.println("Retrieving MyObject.");
                    client.getById(createII());
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static Id createII() {
        Id id = new Id();
        id.setExtension("1");
        return id;
    }

  public gov.nih.nci.iso21090.extensions.Id create(gov.nih.nci.iso21090.reference.MyObject myObject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.CreateRequest params = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.CreateRequest();
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.CreateRequestMyObject myObjectContainer = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.CreateRequestMyObject();
    myObjectContainer.setMyObject(myObject);
    params.setMyObject(myObjectContainer);
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getId();
    }
  }

  public void update(gov.nih.nci.iso21090.reference.MyObject myObject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.UpdateRequest params = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.UpdateRequest();
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.UpdateRequestMyObject myObjectContainer = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.UpdateRequestMyObject();
    myObjectContainer.setMyObject(myObject);
    params.setMyObject(myObjectContainer);
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.UpdateResponse boxedResult = portType.update(params);
    }
  }

  public void delete(gov.nih.nci.iso21090.reference.MyObject myObject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.DeleteRequest params = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.DeleteRequest();
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.DeleteRequestMyObject myObjectContainer = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.DeleteRequestMyObject();
    myObjectContainer.setMyObject(myObject);
    params.setMyObject(myObjectContainer);
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.DeleteResponse boxedResult = portType.delete(params);
    }
  }

  public gov.nih.nci.iso21090.reference.MyObject getById(gov.nih.nci.iso21090.extensions.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getById");
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.GetByIdRequest params = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.GetByIdRequest();
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.GetByIdRequestId idContainer = new gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.GetByIdRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.iso21090.reference.service.entities.myobject.stubs.GetByIdResponse boxedResult = portType.getById(params);
    return boxedResult.getMyObject();
    }
  }

}
